(function ($, w, d, r) {
	if (r.Tools) return;

	class Tools {
		getTimeStamp(milliseconds) {
			if (milliseconds) return Date.now();
			else return Math.floor(Date.now() / 1000)
		}

		getQueryString() {
			let key = false, res = {}, itm = null;
			let qs = location.search.substring(1).split("&amp;").join("&");
			// check for the key as an argument
			if (arguments.length > 0 && arguments[0].length > 1) key = arguments[0];
			// make a regex pattern to grab key/value
			let pattern = /([^&=]+)=([^&]*)/g;
			// loop the items in the query string, either
			// find a match to the argument, or build an object
			// with key/value pairs
			while (itm = pattern.exec(qs)) {
				if (key !== false && decodeURIComponent(itm[1]) === key) return decodeURIComponent(itm[2]);
				else if (key === false) res[decodeURIComponent(itm[1])] = decodeURIComponent(itm[2]);
			}
			return key === false ? res : '';// '' == null
		}

		parseQueryString(url) {
			let key = false, res = {}, itm = null;
			if (!url.split("?")[1]) return false;

			let qs = url.split("?")[1].split("&amp;").join("&");
			// check for the key as an argument
			if (arguments.length > 0 && arguments[1] && arguments[1].length > 1) key = arguments[1];
			// make a regex pattern to grab key/value
			let pattern = /([^&=]+)=([^&]*)/g;
			// loop the items in the query string, either
			// find a match to the argument, or build an object
			// with key/value pairs
			while (itm = pattern.exec(qs)) {
				if (key !== false && decodeURIComponent(itm[1]) === key) return decodeURIComponent(itm[2]);
				else if (key === false) res[decodeURIComponent(itm[1])] = decodeURIComponent(itm[2]);
			}
			return key === false ? res : null;
		}

		//region TODO Cart
		/**
		 * Записываем данные в LocalStorage
		 * @param {object} o
		 * @return boolean
		 * */
		setCartData(o) {
			localStorage.setItem(this.cartKey, JSON.stringify(o));
			return false;
		}

		/**
		 * Получаем данные LocalStorage
		 * @return object
		 * */
		getCartData() {
			// return JSON.parse(localStorage.getItem(this.cartKey)) ?? {};
			let cartObj = JSON.parse(localStorage.getItem(this.cartKey));
			if (cartObj) return cartObj;
			else return {};
		}

		removeCartItem(id) {
			let cartData = this.getCartData();
			if (cartData.hasOwnProperty(id)) delete cartData[id];

			this.setCartData(cartData);
			return false;
		}

		removeCartData() {
			localStorage.removeItem(this.cartKey);
			return false;
		}

		//endregion
	}

	r.Tools = new Tools();
})(jQuery, window, document, window.Fit1CApi = window.Fit1CApi || {});
